{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport jwt from 'jsonwebtoken';\nimport { useNavigate } from 'react-router-dom';\nRouter.post('/deposit/:id', authMiddleware, async (req, res) => {\n  const client = await getClient();\n\n  try {\n    await client.query('begin');\n    const {\n      transaction_date,\n      deposit_amount\n    } = req.body;\n    const account_id = req.params.id;\n    const result = await client.query('select total_balance from account where account_id=$1', [account_id]);\n    const total_balance = +result.rows[0].total_balance;\n    const total = total_balance + deposit_amount;\n    await client.query('insert into transactions(transaction_date, deposit_amount, account_id, balance) values($1,$2,$3,$4) returning *', [transaction_date, deposit_amount, account_id, total]);\n    await client.query('update account set total_balance = total_balance + $1 where account_id=$2', [deposit_amount, account_id]);\n    await client.query('commit');\n    res.send();\n  } catch (error) {\n    await client.query('rollback');\n    res.status(400).send({\n      add_error: 'Error while depositing amount..Try again later.'\n    });\n  } finally {\n    client.release();\n  }\n});\nRouter.post('/withdraw/:id', authMiddleware, async (req, res) => {\n  const client = await getClient();\n\n  try {\n    await client.query('begin');\n    const {\n      transaction_date,\n      withdraw_amount\n    } = req.body;\n    const account_id = req.params.id;\n    const result = await client.query('select total_balance from account where account_id=$1', [account_id]);\n    const total_balance = +result.rows[0].total_balance;\n    const total = total_balance - withdraw_amount;\n\n    if (withdraw_amount <= total_balance) {\n      await client.query('insert into transactions(transaction_date, withdraw_amount, account_id, balance) values($1,$2,$3,$4) returning *', [transaction_date, withdraw_amount, account_id, total]);\n      await client.query('update account set total_balance = total_balance - $1 where account_id=$2', [withdraw_amount, account_id]);\n      await client.query('commit');\n    } else {\n      return res.status(400).send({\n        withdraw_error: \"You don't have enough balance in your account\"\n      });\n    }\n\n    res.send();\n  } catch (error) {\n    await client.query('rollback');\n    res.status(400).send({\n      withdraw_error: 'Error while withdrawing amount..Try again later.'\n    });\n  } finally {\n    client.release();\n  }\n});\nRouter.get('/transactions/:id', authMiddleware, async (req, res) => {\n  const {\n    start_date,\n    end_date\n  } = req.query;\n\n  try {\n    const result = await getTransactions(req.params.id, start_date, end_date);\n    res.send(result.rows);\n  } catch (error) {\n    res.status(400).send({\n      transactions_error: 'Error while getting transactions list..Try again later.'\n    });\n  }\n});\nRouter.get('/download/:id', authMiddleware, async (req, res) => {\n  try {\n    const {\n      start_date,\n      end_date\n    } = req.query;\n    const account_id = req.params.id;\n    const result = await getTransactions(account_id, start_date, end_date);\n    const basePath = path.join(__dirname, '..', 'views');\n    const templatePath = path.join(basePath, 'transactions.ejs');\n    const templateString = ejs.fileLoader(templatePath, 'utf-8');\n    const template = ejs.compile(templateString, {\n      filename: templatePath\n    });\n    const accountData = await func.getAccountByAccountId(account_id);\n    accountData.account_no = accountData.account_no.slice(-4).padStart(accountData.account_no.length, '*');\n    const output = template({\n      start_date: moment(start_date).format('Do MMMM YYYY'),\n      end_date: moment(end_date).format('Do MMMM YYYY'),\n      account: accountData,\n      transactions: result.rows\n    });\n    fs.writeFileSync(path.join(basePath, 'transactions.html'), output, error => {\n      if (error) {\n        throw new Error();\n      }\n    });\n    const pdfSize = await generatePDF(basePath);\n    res.set({\n      'Content-Type': 'application/pdf',\n      'Content-Length': pdfSize\n    });\n    res.sendFile(path.join(basePath, 'transactions.pdf'));\n  } catch (error) {\n    res.status(400).send({\n      transactions_error: 'Error while downloading..Try again later.'\n    });\n  }\n});\nmodule.exports = Router;","map":{"version":3,"names":["React","useEffect","useState","jwt","useNavigate","Router","post","authMiddleware","req","res","client","getClient","query","transaction_date","deposit_amount","body","account_id","params","id","result","total_balance","rows","total","send","error","status","add_error","release","withdraw_amount","withdraw_error","get","start_date","end_date","getTransactions","transactions_error","basePath","path","join","__dirname","templatePath","templateString","ejs","fileLoader","template","compile","filename","accountData","func","getAccountByAccountId","account_no","slice","padStart","length","output","moment","format","account","transactions","fs","writeFileSync","Error","pdfSize","generatePDF","set","sendFile","module","exports"],"sources":["C:/Users/davib/Desktop/FULL-MERN-STACK-CODEDAMN - Copy/client/src/pages/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport jwt from 'jsonwebtoken'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nRouter.post('/deposit/:id', authMiddleware, async (req, res) => {\r\n    const client = await getClient();\r\n    try {\r\n      await client.query('begin');\r\n      const { transaction_date, deposit_amount } = req.body;\r\n      const account_id = req.params.id;\r\n      const result = await client.query(\r\n        'select total_balance from account where account_id=$1',\r\n        [account_id]\r\n      );\r\n      const total_balance = +result.rows[0].total_balance;\r\n      const total = total_balance + deposit_amount;\r\n      await client.query(\r\n        'insert into transactions(transaction_date, deposit_amount, account_id, balance) values($1,$2,$3,$4) returning *',\r\n        [transaction_date, deposit_amount, account_id, total]\r\n      );\r\n      await client.query(\r\n        'update account set total_balance = total_balance + $1 where account_id=$2',\r\n        [deposit_amount, account_id]\r\n      );\r\n      await client.query('commit');\r\n      res.send();\r\n    } catch (error) {\r\n      await client.query('rollback');\r\n      res.status(400).send({\r\n        add_error: 'Error while depositing amount..Try again later.'\r\n      });\r\n    } finally {\r\n      client.release();\r\n    }\r\n  });\r\n  \r\n  Router.post('/withdraw/:id', authMiddleware, async (req, res) => {\r\n    const client = await getClient();\r\n    try {\r\n      await client.query('begin');\r\n      const { transaction_date, withdraw_amount } = req.body;\r\n      const account_id = req.params.id;\r\n      const result = await client.query(\r\n        'select total_balance from account where account_id=$1',\r\n        [account_id]\r\n      );\r\n      const total_balance = +result.rows[0].total_balance;\r\n      const total = total_balance - withdraw_amount;\r\n  \r\n      if (withdraw_amount <= total_balance) {\r\n        await client.query(\r\n          'insert into transactions(transaction_date, withdraw_amount, account_id, balance) values($1,$2,$3,$4) returning *',\r\n          [transaction_date, withdraw_amount, account_id, total]\r\n        );\r\n        await client.query(\r\n          'update account set total_balance = total_balance - $1 where account_id=$2',\r\n          [withdraw_amount, account_id]\r\n        );\r\n        await client.query('commit');\r\n      } else {\r\n        return res.status(400).send({\r\n          withdraw_error: \"You don't have enough balance in your account\"\r\n        });\r\n      }\r\n      res.send();\r\n    } catch (error) {\r\n      await client.query('rollback');\r\n      res.status(400).send({\r\n        withdraw_error: 'Error while withdrawing amount..Try again later.'\r\n      });\r\n    } finally {\r\n      client.release();\r\n    }\r\n  });\r\n  \r\n  Router.get('/transactions/:id', authMiddleware, async (req, res) => {\r\n    const { start_date, end_date } = req.query;\r\n    try {\r\n      const result = await getTransactions(req.params.id, start_date, end_date);\r\n      res.send(result.rows);\r\n    } catch (error) {\r\n      res.status(400).send({\r\n        transactions_error:\r\n          'Error while getting transactions list..Try again later.'\r\n      });\r\n    }\r\n  });\r\n  \r\n  Router.get('/download/:id', authMiddleware, async (req, res) => {\r\n    try {\r\n      const { start_date, end_date } = req.query;\r\n      const account_id = req.params.id;\r\n      const result = await getTransactions(account_id, start_date, end_date);\r\n      const basePath = path.join(__dirname, '..', 'views');\r\n      const templatePath = path.join(basePath, 'transactions.ejs');\r\n      const templateString = ejs.fileLoader(templatePath, 'utf-8');\r\n      const template = ejs.compile(templateString, { filename: templatePath });\r\n      const accountData = await func.getAccountByAccountId(account_id);\r\n      accountData.account_no = accountData.account_no\r\n        .slice(-4)\r\n        .padStart(accountData.account_no.length, '*');\r\n      const output = template({\r\n        start_date: moment(start_date).format('Do MMMM YYYY'),\r\n        end_date: moment(end_date).format('Do MMMM YYYY'),\r\n        account: accountData,\r\n        transactions: result.rows\r\n      });\r\n      fs.writeFileSync(\r\n        path.join(basePath, 'transactions.html'),\r\n        output,\r\n        (error) => {\r\n          if (error) {\r\n            throw new Error();\r\n          }\r\n        }\r\n      );\r\n      const pdfSize = await generatePDF(basePath);\r\n      res.set({\r\n        'Content-Type': 'application/pdf',\r\n        'Content-Length': pdfSize\r\n      });\r\n      res.sendFile(path.join(basePath, 'transactions.pdf'));\r\n    } catch (error) {\r\n      res.status(400).send({\r\n        transactions_error: 'Error while downloading..Try again later.'\r\n      });\r\n    }\r\n  });\r\n  \r\n  module.exports = Router;"],"mappings":"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"},"metadata":{},"sourceType":"module"}